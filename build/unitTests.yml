parameters:
  os: ''
  buildHelp: 'false'
  CodeCoverage: 'false'

steps:
- task: PowerShell@2
  displayName: 'Build Module'
  inputs:
    targetType: 'inline'
    ${{ if eq(parameters.buildHelp, 'false') }}:
      script: '.\Build-Module.ps1 -installDep'
    ${{ if eq(parameters.buildHelp, 'true') }}:
      script: '.\Build-Module.ps1 -installDep -buildHelp'

- task: PowerShell@2
  displayName: 'Install Pester'
  inputs:
    targetType: 'inline'
    script: 'Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck'

- ${{ if eq(parameters.CodeCoverage, 'false') }}:
  - task: PowerShell@2
    displayName: 'Run Unit Tests'
    inputs:
      targetType: 'inline'
      script: |
        Import-Module .\dist\*.psd1
        Invoke-Pester -Script .\unit -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml -passThru
      workingDirectory: '$(System.DefaultWorkingDirectory)'

- ${{ if eq(parameters.CodeCoverage, 'true') }}:
  - task: PowerShell@2
    displayName: 'Run Unit Tests'
    inputs:
      targetType: 'inline'
      script: |
        Import-Module .\dist\*.psd1
        Invoke-Pester -Script .\unit -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml -passThru
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], true))

  - task: PowerShell@2
    displayName: 'Run Unit Tests with Code Coverage'
    inputs:
      targetType: 'inline'
      script: |
        Import-Module .\dist\*.psd1
        Invoke-Pester -Script .\unit -CodeCoverage .\dist\*.ps*1 -CodeCoverageOutputFile coverage.xml -CodeCoverageOutputFileFormat JaCoCo -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], false))

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      summaryFileLocation: '**\coverage.xml'
      failIfCoverageEmpty: true
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], false))

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**\test-results.xml'
    testRunTitle: '${{ parameters.os }} Unit Tests'
  condition: succeededOrFailed()